name: Hprofile-Actions
on: workflow_dispatch
jobs:
  Testing:
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4
      
      - name: Maven test
        run: mvn test
      
      - name: checkstyle
        run: mvn checkstyle:checkstyle

      # Setup java 17 to be default (sonar-scanner requirement)
      - name: Set Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      
      # Setup sonnar-scanner
      - name: Setup sonnarQube
        uses: warchant/setup-sonar-scanner@v7
      
      # Run sonar-scanner
      - name: Sonarqube Scan
        run: sonar-scanner
          -Dsonar.host.url=${{ secrets.HOST }}
          -Dsonar.login=${{ secrets.LOGIN }}
          -Dsonar.organization=${{ secrets.ORGANIZATION }}
          -Dsonar.projectKey=${{ secrets.PROJECT }}
          -Dsonar.sources=src/
          -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/
          -Dsonar.junit.reportsPath=target/surefire-reports/
          -Dsonar.jacoco.reportsPath=target/jacoco.exec
          -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
        
      # Triggering SonarQube analysis as results of it are required by Quality Gate check
      - name: SonarQube quality gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.LOGIN }}
          SONAR_HOST_URL: ${{ secrets.HOST }}

  BUILD_AND_TEST:
    needs: Testing
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Update application.properties file
        run: |
          sed -i "s/^jdbc.username.*$/jdbc.username\=${{ secrets.RDS_USER }}/" src/main/resources/application.properties
          sed -i "s/^jdbc.password.*$/jdbc.password\=${{ secrets.RDS_PASSWORD }}/" src/main/resources/application.properties
          sed -i "s/db01/${{ secrets.RDS_ENDPOINT }}/" src/main/resources/application.properties

      - name: upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ID }}
          secret_key: ${{ secrets.AWS_KEY }}
          registry: ${{ secrets.AWS_ECR }}
          repo: vprofileappimg
          region: ap-south-1
          tags: latest,${{ github.run_number }}
          daemon_off: false
          dockerfile: ./Dockerfile
          context: ./